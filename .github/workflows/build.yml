name: Build Solution

on:
  push:
    paths:
      - 'src/**'
      - '.github/**'
  pull_request:
    paths:
      - 'src/**'
      - '.github/**'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '9.0.x'

    - name: Start SQL Server Container
      run: |
        docker pull mcr.microsoft.com/mssql/server:2019-latest
        docker run -d `
          -e "ACCEPT_EULA=Y" `
          -e "SA_PASSWORD=Password12!" `
          -p 1433:1433 `
          --name sql2019 `
          mcr.microsoft.com/mssql/server:2019-latest
        
        Write-Host "Waiting for SQL Server to start..."
        Start-Sleep -Seconds 30
        
        docker ps
        docker logs sql2019
      shell: pwsh

    - name: Test SQL Server Connection
      run: |
        $connectionString = "Server=.,1433;Database=master;User Id=sa;Password=Password12!;TrustServerCertificate=True;"
        $maxAttempts = 3
        $attempt = 0
        $success = $false
        
        while ($attempt -lt $maxAttempts -and -not $success) {
            $attempt++
            try {
                $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
                $command = New-Object System.Data.SqlClient.SqlCommand("SELECT @@VERSION", $connection)
                
                $connection.Open()
                $result = $command.ExecuteScalar()
                Write-Host "SQL Server Version: $result"
                Write-Host "Connection test successful!"
                $success = $true
            }
            catch {
                Write-Host "Attempt $attempt failed: $_"
                if ($attempt -lt $maxAttempts) {
                    Write-Host "Waiting before retry..."
                    Start-Sleep -Seconds 10
                }
            }
            finally {
                if ($connection) {
                    $connection.Close()
                }
            }
        }
        
        if (-not $success) {
            Write-Host "Failed to connect to SQL Server after $maxAttempts attempts"
            docker logs sql2019
            exit 1
        }
      shell: pwsh

    - name: Create Test Database
      run: |
        $connectionString = "Server=.,1433;Database=master;User Id=sa;Password=Password12!;TrustServerCertificate=True;"
        $createDbQuery = "
        IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'TestDB')
        BEGIN
            CREATE DATABASE TestDB;
        END
        "
        
        $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
        $command = New-Object System.Data.SqlClient.SqlCommand($createDbQuery, $connection)
        
        try {
            $connection.Open()
            $command.ExecuteNonQuery()
            Write-Host "TestDB database created successfully!"
        }
        catch {
            Write-Host "Error creating database: $_"
            docker logs sql2019
            exit 1
        }
        finally {
            $connection.Close()
        }
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore src/SqlBulkCopier.sln

    - name: Build solution
      run: dotnet build src/SqlBulkCopier.sln --configuration Release --no-restore