name: Build Solution

on:
  push:
    paths:
      - 'src/**'
      - '.github/**'
  pull_request:
    paths:
      - 'src/**'
      - '.github/**'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '9.0.x'

    - name: Test SQL Server Connection
      run: |
        # SQLCmdツールのインストール
        Write-Host "Installing SQL Server Command Line Tools..."
        choco install sqlserver-cmdlineutils -y
        
        # 各種接続文字列でテスト
        $testQueries = @(
          @{
            server = "(local)";
            desc = "Local default instance"
          },
          @{
            server = "(local)\SQLEXPRESS";
            desc = "Local SQL Express instance"
          },
          @{
            server = ".";
            desc = "Local dot notation"
          },
          @{
            server = "localhost";
            desc = "Localhost"
          }
        )
        
        $success = $false
        foreach ($test in $testQueries) {
          Write-Host "`nTesting connection to $($test.desc) ($($test.server))..."
          try {
            sqlcmd -S "$($test.server)" -Q "SELECT @@VERSION" -C -t 5
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Successfully connected to $($test.server)!"
              $success = $true
              $global:workingServer = $test.server
              break
            }
          }
          catch {
            Write-Host "Failed to connect to $($test.server): $_"
          }
        }
        
        if (-not $success) {
          Write-Host "Could not connect to any SQL Server instance"
          Write-Host "Available SQL Server tools:"
          Get-Command sqlcmd -ErrorAction SilentlyContinue
          Get-Command osql -ErrorAction SilentlyContinue
          exit 1
        }
      shell: pwsh

    - name: Create Test Database
      if: success()
      run: |
        Write-Host "Creating test database using $global:workingServer..."
        sqlcmd -S "$global:workingServer" -Q "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'TestDB') CREATE DATABASE TestDB;"
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore src/SqlBulkCopier.sln

    - name: Build solution
      run: dotnet build src/SqlBulkCopier.sln --configuration Release --no-restore